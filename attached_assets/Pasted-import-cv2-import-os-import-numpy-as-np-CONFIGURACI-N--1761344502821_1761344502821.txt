import cv2
import os
import numpy as np

# ==============================
# CONFIGURACIÓN
# ==============================
DATASET_DIR = "dataset"  # Carpeta que contiene las imágenes de referencia
FACE_CASCADE_PATH = cv2.data.haarcascades + "haarcascade_frontalface_default.xml"

# ==============================
# CARGA Y PROCESAMIENTO DE IMÁGENES DE REFERENCIA
# ==============================
face_cascade = cv2.CascadeClassifier(FACE_CASCADE_PATH)
faces_list = []
labels_list = []
names = {}
label_id = 0

print("[INFO] Cargando imágenes desde la carpeta:", DATASET_DIR)

for filename in os.listdir(DATASET_DIR):
    if filename.lower().endswith((".jpg", ".png", ".jpeg")):
        path = os.path.join(DATASET_DIR, filename)
        img = cv2.imread(path)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        faces = face_cascade.detectMultiScale(gray, 1.3, 5)
        if len(faces) == 0:
            print(f"[WARN] No se detectó rostro en: {filename}")
            continue

        (x, y, w, h) = faces[0]
        face_roi = gray[y:y+h, x:x+w]

        faces_list.append(face_roi)
        labels_list.append(label_id)
        names[label_id] = os.path.splitext(filename)[0]
        label_id += 1

print(f"[INFO] {len(faces_list)} rostros cargados correctamente.")
if len(faces_list) == 0:
    raise RuntimeError("No se encontraron rostros válidos en la carpeta del dataset.")

# ==============================
# ENTRENAR EL RECONOCEDOR FACIAL
# ==============================
print("[INFO] Entrenando modelo LBPH...")
recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.train(faces_list, np.array(labels_list))
print("[INFO] Entrenamiento completado.")

# ==============================
# DETECCIÓN Y RECONOCIMIENTO EN TIEMPO REAL
# ==============================
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    raise RuntimeError("No se pudo abrir la cámara.")

print("[INFO] Presiona ESC para salir...")

while True:
    ret, frame = cap.read()
    if not ret:
        break

    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    for (x, y, w, h) in faces:
        face_roi = gray[y:y+h, x:x+w]

        # Realiza la predicción
        label, confidence = recognizer.predict(face_roi)

        if confidence < 70:
            name = names[label]
            color = (0, 255, 0)  # Verde
            text = f"{name} ({confidence:.1f})"
        else:
            name = "Desconocido"
            color = (0, 0, 255)  # Rojo
            text = f"{name} ({confidence:.1f})"

        # Dibujar rectángulos y texto
        cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
        cv2.rectangle(frame, (x, y + h), (x + w, y + h + 30), color, -1)
        cv2.putText(frame, text, (x + 5, y + h + 22), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 1)

    cv2.imshow("Reconocimiento Facial (OpenCV)", frame)
    k = cv2.waitKey(1)
    if k == 27 & 0xFF:  # ESC
        break

cap.release()
cv2.destroyAllWindows()
